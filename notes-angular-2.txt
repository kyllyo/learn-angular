
Notas - Curso Angular 2

1 - Capitulo 1 
	- Tudo é um compontente.
	- Existe um componente Raiz.
	- {} - Componente - é a junção de 3 itens: template, metadados, dados 
	- Componente Raiz  
	- Router - responsavel pela navegacao. Mesmo a aplicação tendo só uma página.
	- Blocos Principais:
		- Componentes		-Template
		- Diretivas		-Metadata
		- Roteamento		-Data Binding
		- Servicos		-Injeção de Dependência
	- https://github.com/loine/curso-angular2
	- https://github.com/angular	

2 - Capitulo 2
	- https://nodejs.org
	- NPM - é como se fosse o Maven. Fazendo analogia para o mundo java 
	- https://www.npmjs.com - Possui várias bibliotecas que utlizamos para o desenvolvimento em Angular
	- npm install -g typescript
	- TypeScript é um superconjunto do javascript.
	- npm install -g @angular/cli	

3 - Capitulo 3
	- Criar o projeto:
		- ng new primeiro-projeto
		- Iniciar o servidor: ng serve
		- Gerar um novo component: ng g c meu-primeiro2

4 - Capitulo 4
	- TypeScript pode ser utilizado em qualquer projeto javascript
	- Transpiler, compila o codigo JS2015 em javascript puro.
	- Babel, um dos transpile mais populares 
	- babeljs.io

5 - Capitulo 5 - Módulos
	- Organiza melhor o código
	- AppModule - é o módulo raiz default da nossa aplicação	
	- declarations: 
	- imports : coloca outros modulos que queremos utilizar
	- providers: colocamos os servicos que o modulo utiliza. Se o serviço for glogal serve para toda a aplicação
	- bootstrap: [AppComponent]: existe só no módulo raiz da aplicação 
	- Podemos criar módulos de funcionalidade.
	- Criar um modulo: ng g m nome_modulo
	- Modulo de funcionalidade nao tem Bootstrap
	- CommonModule fica no module de funcionalidade

6 - Capitulo 6 - Templates
	- Template é o HTML
	- Componente é o .ts (arquivo typescript)
	- Dentro do componente, existe duas maneiras de definir o template:
		- usando a tag "template", seu conteúdo ficará dentro de `. Recomendado apenas 3 linhas, no máximo. Nesse caso não precisa do .html
		- usando a tag "templateUrl", informando o caminho do arquivo .html, que contém o conteúdo. Para maiores de 3 linhas.

7 - Capitulo 7 - Servicos
	- Iniciar o serviço: ng g s cursos/cursos
	- Necessário declarar o serviço criado no cursos.modules.ts, dentro de providers. Ex: providers: [CursosService]

8 - Capitulo 8 - Plugins Atom e VS Code
	- CTRL+p - Para procurar arquivos no VS Code. 

9 - Capitulo 9 - Property Binding e Interpolação
	- Interpolação: 
		- Usa-se no html: {{ nome_definido_no_componente }}
	- Property Binding:
		- Usa-se no html: <img [src]="nome_definido_no_componente" >
		- Linha anterior é a mesma coisa que: <img bind-src="nome_definido_no_componente" >

10 - Capitulo 10 - Class e Style Binding
	- http://getbootstrap.com
	- Fontes:
		- https://github.com/valor-software/ngx-bootstrap/blob/development/docs/getting-started/ng-cli.md
		- https://www.npmjs.com/package/ng2-bootstrap
	- npm install ngx-bootstrap bootstrap --save (Baseado nas fontes acima)
	- Se não quiser instalar, pode adicionar no cabecalho do index.html, o css externo:
		- <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">

11 - Capitulo 11 - Event Binding
	- Definição de estilos pode ser feita de 3 formas:
		- style.css - maneira global
		- styleUrl - dentro do componente, podemos criar um arquivo especifico de CSS para o componente
		- style - tag dentro do componente, caso de ser pouco conteudo do CSS sendo específico para a página.

12 - Capitulo 12 - Two Way Data Binding
	- NgModel é uma representação de uma entidade. Pode ser atributo simples ou objeto.
	- ngModel possui um evento chamado change: ngmodelchange
	- Sintaxe do ngmodel:
		- <input type="text" [(ngModel)]="nome" />
	- Temos que declarar o FormsModule dentro da definicao do module que o ngModel será utilizado.
	- Ex: dentro do app.modules.ts adicionamos FormsModule dentro do import	

13 - Capitulo 13 - Input/Output Properties
	- Trata da transferencia de atributos e valores entre componentes 
	- @Input para marcar a propriedade que pode ser lida de outros componentes.
	- @Input esta dentro de @angular/core
	- Input Properties também pode receber objetos

14 - Capitulo 14 - Eventos
	- O componente pai tem como ficar escutando se suas propriedades mudam onde são utilizadas
	- EventEmitter é utilizado para tal
	- Importante dizer, que o EventEmitter fica no pacote @angular/core

15 - Capitulo 15 - Ciclo de Vida
	- ngOnChanges		-ngAfterContentInit
	- ngOnInit		-ngAfterContentChecked
	- ngDoCheck		-ngAfterViewChecked
	- ngOnDestroy
	- O ng por padrão já cria o método ngOnInit por default nos componentes criados por esta ferramenta.
	- Os métodos de ciclo mais utilizados são o ngOnInit e ngOnChanges

16 - Capitulo 16 - DOM
	- Como acessar uma variavel definida no html, dentro do componente ?
		- Esse capitulo ensina como fazer.
	- Definir no HTML a variavel usando a sintaxe: #nomevariavel
	- No Componente acessar a variavel com @ViewChild('nomevariavel') do tipo ElementRef ou HtmlElement

17 - Capitulo 17 - Angular CLI
	- npm install -g angular-cli
	- ng new nome_projeto - cria uma pasta com a estrutura pronta para o projeto
	- ng init - você inicializa um projeto angular de uma pasta já criada

18 - Capitulo 18 - CLI - Criando componentes/servicos
	- ng generate compomente nome_componente 
	- Forma abreviada: ng g c nome_componente
	- ng g service nome_servico - para criar um servico
	- As classes .spec.ts são classes de testes do componente. Utiliza-se o jasmine
	- Tipos de arquivos que podem ser criados via linha de comando do cli:
		- component		- service
		- directive		- pipe	
		- class			- interface
		- enum

19 - Capitulo 19 - CLI - Usando Sass, Less ou Stylus
	- Gerenciador de estilos.
	- Ao gerar o projeto:
		- ng new meu-projeto --style=sass
	- Se tiver um projeto já existente:
		- ng set defaults.styleExt scss (ou less ou stylus) - O 'set' está deprecated nos angular mais novos.
	- No angular 6 (mais novo) o comando é:
		- ng config schematics.@schematics/angular:component.styleext scss (ou less ou styl)

20 - Capitulo 20 - CLI: ng lint, ng test, ng e2e
	- ng lint - escaneia o codigo, verifica boas praticas do style guide (http://angular.io/styleguide)
	- ng test - executa os teste jasmine, testes unitarios etc
	- lint - procura por pequenos erros 
	- Jasmine - biblioteca de teste orientada a comportamento

21 - Capitulo 21 - Estrutura do projeto
	- O Angular CLI cria toda a estrutura do projeto
		- Instala todas as dependencias
	- Documentacao é sua melhor amiga:
		- https://angular.io/docs		

22 - Capitulo 22 - Gerando build de producao
	- Build de Desenvolvimento:
		- ng build ou ng build --dev
		- A build é gerada dentro do diretorio 'dist'
			- util para integrar o codigo com o backend
			- Possivel debugar
			- main.bundle.js contem todo codigo do projeto + css + html
	- Build de Producao:
		- ng build --prod
		- Diferenca do desenvolvimento:
			- Este codigo é ofuscado e mimificado, codigo ilegivel comparado com o que é gerado no desenvolvimento
	- Instalando um servidorzinho http do nodejs
		- npm install http-server -g

23 - Capitulo 23 - Instalando bibliotecas externas
	- Instalar o bootstrap (ou qualquer outra biblioteca externa):
		- npm install -save bootstrap@next (next, instala a ultima versao)
	- Seguir a documentacao da biblioteca que for utilizar.

24 - Capitulo 24 - Diretivas
	- Diretivas são uma forma de passarmos instruções para nosso codigo html (template)
	- Ex: <li *ngFor="let curso of cursos"> {{ curso }} </li>
	- 2 tipos de diretivas
		- estruturais (ngFor, ngIf) - interagem com a view e modificam a estrutura da DOM
		- atributos (ng-class, ng-estyle) - interagem com o elemento em que foram aplicadas

25 - Capitulo 25 - Diretiva NgIf
	- Mesmo comportamento que o if de qq linguagem de programacao
	- <div *ngIf="cursos.length > 0" >
	- [hidden] vs *ngIf
		- *ngIf  - recomendado para arvores de elementos grandes
		- [hidden] - é mais performático - Não tem segurança. O conteúdo está lá.

26 - Capitulo 26 - Diretiva NgSwitch
	- Exemplo:
  		<div class="container" [ngSwitch]="aba">
    			<p *ngSwitchCase="'mapa'" >Modo Mapa Ativado</p>
    			<p *ngSwitchCase="'lista'" >Modo Lista Ativado</p>
    			<p *ngSwitchDefault >Home</p>
  		</div>

27 - Capitulo 27 - Diretiva NgFor
	- Exemplo:
		<ul>
		  <li *ngFor="let curso of cursos, let i = index">
		    {{ i + 1 }} - {{ curso }}
		  </li>
		</ul>

28 - Capitulo 28 - Motivo do * e <template>
	- Exemplo:
		<ng-template [ngIf]="!mostrarCursos">
		  <div>Lista de cursos aqui 2..</div>
		</ng-template>
	
29 - Capitulo 29 - Diretiva ngClass
	- https://getbootstrap.com/docs/3.3/components/
	- Exemplo:
	    <i class="glyphicon"
    		  [ngClass]="{
      		  'glyphicon-star-empty': !meuFavorito,
	          'glyphicon-star':meuFavorito
  		    }"
  		    (click)="onClick()">
       	  </i>

30 - Capitulo 30 - Diretiva ngStyle
	- Exemplo:
<button
  [ngStyle]="{
    'backgroundColor': ativo ? 'blue':'gray',
    'color': ativo ? 'white':'black',
    'fontWeight': ativo ? 'bold':'normal',
    'fontSize': tamanhoFonte + 'px'
  }"
  (click)="mudarAtivo()">
  Mudar atributo 'ativo'
</button>

31 - Capitulo 31 - Operador elvis
	- Serve para evitar a checagem do objeto ser null
	- '?' antes do ponto
	- Responsável: {{ tarefa.responsavel?.nome: '' }}
	- Se o 'responsavel' for != de null, então chamamos sua propriedade nome.

32 - Capitulo 32 - ngContent
	- ngContent coloca o conteudo de quem chama, no componente que o possui

33 - Capitulo 33 - ElementRef e Renderer
	- Diretiva é um componente sem template
	- ng g d (directive) shared/fundo-amarelo 
	- 

34 - Capitulo 34 - HostListener e HostBinding
	- Muito útil para modificarmos atributos a partir de eventos na página que a diretiva está

35 - Capitulo 35 - Diretivas - Input e Property Binding

36 - Capitulo 36 - ngElse
	- ngElse não existe no angular 

37 - Capitulo 37 - Servicos
	- Servicos é a ponte entre o componente e o backend
	- Util para não repetir codigo na nossa aplicação

38 - Capitulo 38 - Criando um Servico
	- Servico nada mais é que uma classe que contém alguma lógica na obtenção de dados que são usados no front-end

39 - Capitulo 39 - Injecao de dependencia
	- SIngleton- objeto unico para toda a aplicação 

40 - Capitulo 40 - Utilizando a injeção
	- @Injectable na classe que se deseja injetar.
	- colocar no [providers] do módulo que se deseja utilizar
	- Ou no componente que se deseja. Nesse caso ele terá uma instância própria

41 - Capitulo 41 - Comunicacao entre componentes usando servicos
	- 	

42 - Capitulo 42 - Injetando servico em outro servico
	- ng g s shared/log 

43 - Capitulo 43 - Pipes
	- Utiliza-se os pipes para formatar a saída nos templates.
	- Ex: {{ livro.dataLancamento | date:'dd-MM-yyyy' }}

44 - Capitulo 44 - Criando pipes
	- ng g p nome_pipe OU ng g pipe nome_pipe 

45 - Capitulo 45 - Aplicando locale 
	- 

46 - Capitulo 46 - Pipe Puro
	- 

47 - Capitulo 47 - Pipe Impuro
	- 

48 - Capitulo 48 - Pipe Async
	- Útil quando precisamos buscar dados no servidor. Pq as vezes a resposta demora. 

49 - Capitulo 49 - Introducao ao roteamento
	- SPA - Single Page Application
	- Não dá refresh na página	

50 - Capitulo 50 - Rotas Simples
	-

51 - Capitulo 51 - RouterLink
	-

52 - Capitulo 52 - Aplicando CSS em rotas ativas
	-

53 - Capiutlo 53 - Extrair parametros de roteamento nas rotas
	-

54 - Capitulo 54 - Escutando mudanças nos parâmetros de roteamento
	-

55 - Capitulo 55 - Rotas imperativas
	- 

56 - Capitulo 56 - Definindo e extraindo parametros de url
	- 

57 - Capitulo 57 - Criando um modulo de rotas
	-

58 - Capitulo 58 - Organizando em modulos
	- Módulo de Funcionalidade importamos o 'CommonModule'.
	- Módulo raiz de aplicacao importamos o 'BrowserModule'. 

59 - Capitulo 59 - Rotas de funcionalidade
	-

60 - Capiutlo 60 - Rotas Filhas
	-

61 - Capitulo 61 - Rotas Filhas - Desenvolvendo telas
	- 

62 - Capitulo 62 - Rotas - Dicas de Performance - Lazy Loading
	- 

63 - Capitulo 63 - Rotas - Tela de Login 
	- 

64 - Capitulo 64 - Guarda de rotas - canActivate
	- 

65 - Capitulo 65 - Guarda de rotas para rotas filhas
	- 

66 - Capitulo 66 -Guarda de rotas: canDeactivate
	- Ao sair de um formulário, podemos perguntar se o usuário tem certeza de que é isso que ele quer. 

67 - Capitulo 67 - Guarda de rotas: canDeactivate com Interface Generica
	- 

68 - Capitulo 68 - Guarda de rotas: carregando dados antes da rota ser ativada
	-

69 - Capitulo 69 - Guarda de rotas: Nao deixar carregar modulos sem permissao
	- 

70 - Capitulo 70 - Rota padrao para pagina nao encontrada
	- 

71 - Capitulo 71 - Configurando o estilo da rota. Html5 ou #
	- useHash: true, no forRoot 

72 - Capitulo 72 - Formularios: 2 Formas
	- Template Driven
		- Tudo no HTML
		- FormGroup
		- ngSubmit
	- Data Driven (reativo)
		- Configurado no componente
		- Validacoes no componente
		
73 - Capitulo 73 - Inciando projeto de Formulario
	- ng new forms --routing
	- npm install ngx-bootstrap bootstrap --save (Assim instala a versao 4 do bootstrap)
	- npm install ngx-bootstrap bootstrap@3.3.7 --save (instala a versao 3 do bootstrap)

74 - Capitulo 74 - ngForm, ngSubmit, ngModel
	- 

75 - Capitulo 75 - ngModel (two-way data-binding)
	-

76 - Capitulo 76 - Forms - Modulos e Formularios
	-

77 - Capitulo 77 - Forms - Validacao de campos
	-

78 - Capitulo 78 - Forms - Aplicando CSS na validacao dos campos
	-

79 - Capitulo 79 - Forms - Mensagens de erro de validacao
	- 

80 - Capitulo 80 - Forms - Desabilitando o botao de submit de form invalido
	- 

81 - Capitulo 81 - Forms - Dados do Form com JSON
	-

82 - Capitulo 82 - Forms - Add campos de endereco
	-

83 - Capitulo 83 - Forms - Simplificando CSS e mensagens de erro
	-

84 - Capitulo 84 - Forms - Form Group
	- ngModelGroup

85 - Capitulo 85 - Usando webservice para buscar o CEP
	-

86 - Capitulo 86 - Populando os campos com os dados obtidos do webservice
	-

87 - Capitulo 87 - Forms - Submetendo valores com Http Post
	-

88 - Capitulo 88 - Forms reativos - Introducao
	- Criados no próprio componente. Preferido da Loiane.

89 - Capitulo 89 - Forms reativos - configuracao
	- form: FormGroup
	- ReactiveFormsModule (@angular/forms)

90 - Capitulo 90 - Forms reativos - primeiro formulario
	-

***********************************************************************************
Aula sobre mudancas do Angular 2 para o Angular 4
	- *ngIf agora com a possibilidade de else:
		- <div *ngIf="mostrarCursos; else cursosVazio">
			conteudo
		</div>
		<ng-template #cursosVazio>
			conteudo de cursos vazio
		</ng-template>
	- *ngFor



***********************************************************************************

91 - Capitulo 91 - Forms reativos - sincronizando
	- FormControlName

92 - Capitulo 92 - Forms reativos - Fazendo submit
	-  

93 - Capitulo 93 - Forms reativos - Resetando o form
	-

94 - Capitulo 94 - Forms reativos - Validacao de campos
	-

95 - Capitulo 95 - Forms reativos - FormControl e CSS de validacao de campos
	-

96 - Capitulo 96 - Forms reativos - migrando template driven para form reativo
	-

97 - Capitulo 97 - Forms reativos - FormGroups
	-

98 - Capitulo 98 - Forms reativos - autopopulando campos pelo cep
	-

99 - Capitulo 99 - Forms reativos - validacao dos campos pelo botao submit
	-

100 - Capitulo 100 - Forms reativos - servico de estados brasileiros
	-

101 - Capitulo 101 - Forms reativos - servico de consulta cep dentro do modulo compartilhado
	-

102 - Capitulo 102 - Forms reativos - organizando melhor modulos
	-

103 - Capitulo 103 - Forms reativos - combobox (select)
	- usar o ngValue ao inves do value em select quando estamos trabalhando com objetos.
	- o angular usa o operador de referencia por default. O correto seria utilizar o operador de valor.
	- usar o compareWith no select e implementar o metodo de comparacao. 
	- Metodo compararCargos esta no data-form.component.ts 
		- github.com/loiane/curso-angular/.../forms/.../data-form/data-form.component.ts
	- Valores simples podem ser utilizados com value mesmo. Mas se for objeto, tem que utilizar o ngValue e compareWith

104 - Capitulo 104 - Forms reativos - combobox com multiplas opcoes
	- <select multiple ...

105 - Capitulo 105 - Forms reativos - radiobutton
	-<div *ngFor="let opcacao of opcoes" ...
	- <input type="radio" formControlName="newsletter">...

106 - Capitulo 106 - Forms reativos - Checkbox tugglei (Só um, tipo aceita os termos .... )
	- <input type="checkbox" 
	- para validar devemos usar na definicao dos campos do ngGroup:
		- Ex:
			-termos:[null, Validators.pattern[('true')]	

107 - Capitulo 107 - Forms reativos - Checkbox dinamicos - FormArray
	-<div ... formArrayName="frameworks" ngFor="let item of formulario.get('frameworks').controls; let i = index">

108 - Capiculo 108 - Forms reativos - Validacao customizada no checkbox (formarray)
	- Utilizacao de programacao funcional. Metodos 'map' e 'reduce'

109 - Capitulo 109 - Forms reativos - Validacao no campo CEP
	-

110 - Capitulo 110 - Forms reativos - Validacao de dois campos iguais
	- ng2-validation - Muitas validações já prontas

111 - Capitulo 111 - Forms reativos - Validacões assincronas
	- São validações feitas do lado do servidor
	- Os Observables são preguiçosos. Eles só executam quando fazemos o subscribe.
	- Para utilizar os Operadores em um Observable, utilizamos o
.pipe ( e dentro usamos qualquer operador. Ex: delay,map, tap etc)

112 - Capitulo 112 - Forms reativos - Serviço de mensagens de erros
	-

113 - Capitulo 113 - Forms reativos - Reagindo a mudancas reativamente
	- formulario.statusChanges





















